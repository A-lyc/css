// 根据 $mode 设置单位（rpx 或 px）
@function jason-css-value ($px) {
  // 判断返回 px 单位还是 无单位（line-height）
  @if (unit($px) == '') {
    @return $px;
  } @else if ($mode == mini-program) {
    @return strip-unit($px) * 1rpx;
  } @else {
    @return strip-unit($px) * 1px;
  }
}

// flex 工具类
@mixin flex-utils($screen-name: null) {
  @if ($screen-name) {
    $screen-name: -#{$screen-name};
  }

  // flex-direction
  .flex#{$screen-name}-row {
    flex-direction: row;
  }
  .flex#{$screen-name}-row-reverse {
    flex-direction: row-reverse;
  }
  .flex#{$screen-name}-column {
    flex-direction: column;
  }
  .flex#{$screen-name}-column-reverse {
    flex-direction: column-reverse;
  }

  // flex-wrap
  .flex#{$screen-name}-nowrap {
    flex-wrap: nowrap;
  }
  .flex#{$screen-name}-wrap {
    flex-wrap: wrap;
  }
  .flex#{$screen-name}-wrap-reverse {
    flex-wrap: wrap-reverse;
  }

  // justify-content
  .justify-content#{$screen-name}-start {
    justify-content: flex-start;
  }
  .justify-content#{$screen-name}-end {
    justify-content: flex-end;
  }
  .justify-content#{$screen-name}-center {
    justify-content: center;
  }
  .justify-content#{$screen-name}-between {
    justify-content: space-between;
  }
  .justify-content#{$screen-name}-around {
    justify-content: space-around;
  }

  // align-items
  .align-items#{$screen-name}-start {
    align-items: flex-start;
  }
  .align-items#{$screen-name}-end {
    align-items: flex-end;
  }
  .align-items#{$screen-name}-center {
    align-items: center;
  }
  .align-items#{$screen-name}-baseline {
    align-items: baseline;
  }
  .align-items#{$screen-name}-stretch {
    align-items: stretch;
  }

  // align-content
  .align-content#{$screen-name}-start {
    align-content: flex-start;
  }
  .align-content#{$screen-name}-end {
    align-content: flex-end;
  }
  .align-content#{$screen-name}-center {
    align-content: center;
  }
  .align-content#{$screen-name}-between {
    align-content: space-between;
  }
  .align-content#{$screen-name}-around {
    align-content: space-around;
  }
  .align-content#{$screen-name}-stretch {
    align-content: stretch;
  }

  // align-self
  .align-self#{$screen-name}-start {
    align-self: start;
  }
  .align-self#{$screen-name}-end {
    align-self: end;
  }
  .align-self#{$screen-name}-center {
    align-self: center;
  }
  .align-self#{$screen-name}-baseline {
    align-self: baseline;
  }
  .align-self#{$screen-name}-stretch {
    align-self: stretch;
  }

  // order
  @for $i from 0 through $col-num {
    .order#{$screen-name}-#{$i} {
      order: $i
    }
  }
}

// text 工具类
@mixin text-utils($screen-name: null) {
  // 断点名
  @if ($screen-name) {
    $screen-name: -#{$screen-name};
  }

  .text-align#{$screen-name}-left {
    text-align: left;
  }
  .text-align#{$screen-name}-center {
    text-align: center;
  }
  .text-align#{$screen-name}-right {
    text-align: right;
  }
}

// container
@mixin container-width($screen-name: null) {
  // 断点
  $breakpoint: map_get($responsive-breakpoint, $screen-name);
  // container 最大宽度
  $container-max-width: map_get($breakpoint, container-max-width);

  max-width: $container-max-width;
}

// col
@mixin col($screen-name: null) {
  @if ($screen-name) {
    $screen-name: -#{$screen-name};
  }

  @for $i from 1 through $col-num {
    $size: 100 / $col-num * $i * 1%;
    // 宽度定义
    .col#{$screen-name}-#{$i} {
      min-height: 1px;
      // float 实现
      @if ($use-flex == true) {
        flex: 0 0 $size;
        max-width: $size;
      }
      @if ($use-flex != true) {
        float: left;
        width: $size;
      }
    }
    // 辅助类定义 pull push offset
    .col#{$screen-name}-pull-#{$i} {
      position: relative;
      right: $size
    }
    .col#{$screen-name}-push-#{$i} {
      position: relative;
      left: $size;
    }
    .col#{$screen-name}-offset-#{$i} {
      margin-left: $size;
    }
  }
}

// margin
@mixin margin($level, $value) {
  .m-#{$level} {
    margin: $value;
  }
  .mx-#{$level} {
    margin-left: $value;
    margin-right: $value;
  }
  .my-#{$level} {
    margin-top: $value;
    margin-bottom: $value;
  }
  .mt-#{$level} {
    margin-top: $value;
  }
  .mr-#{$level} {
    margin-right: $value;
  }
  .mb-#{$level} {
    margin-bottom: $value;
  }
  .ml-#{$level} {
    margin-left: $value;
  }
}

// padding
@mixin padding($level, $value) {
  .p-#{$level} {
    padding: $value;
  }
  .px-#{$level} {
    padding-left: $value;
    padding-right: $value;
  }
  .py-#{$level} {
    padding-top: $value;
    padding-bottom: $value;
  }
  .pt-#{$level} {
    padding-top: $value;
  }
  .pr-#{$level} {
    padding-right: $value;
  }
  .pb-#{$level} {
    padding-bottom: $value;
  }
  .pl-#{$level} {
    padding-left: $value;
  }
}

// line-height
@mixin line-height($level, $value) {
  .lh-#{$level} {
    line-height: $value;
  }
}

// font-size
@mixin font-size($level, $value) {
  .fs-#{$level} {
    font-size: $value;
  }
}

// row-space
@mixin row-space($level, $value) {
  &.space-#{$level} {
    margin-left: -($value / 2);
    margin-right: -($value / 2);
    > [class*="col-"] {
      padding-left: $value / 2;
      padding-right: $value / 2;
    }
  }
}

// 循环创建等级类
@mixin loop-level($type, $responsive: false) {
  $min-ratio: null;
  $min-val: null;
  $max-level: null;
  $level-span: null;

  // 根据不同属性设置变量
  @if ($type == margin) {
    $max-level: $margin-max-level;
    $level-span: $margin-level-span;
    $min-ratio: $margin-min-ratio;
    $min-val: $margin-min-val;
  }
  @if ($type == padding) {
    $max-level: $padding-max-level;
    $level-span: $padding-level-span;
    $min-ratio: $padding-min-ratio;
    $min-val: $padding-min-val;
  }
  @if ($type == line-height) {
    $max-level: $lh-max-level;
    $level-span: $lh-level-span;
    $min-ratio: $lh-min-ratio;
    $min-val: $lh-min-val;
  }
  @if ($type == font-size) {
    $max-level: $fs-max-level;
    $level-span: $fs-level-span;
    $min-ratio: $fs-min-ratio;
    $min-val: $fs-min-val;
  }
  @if ($type == row-space) {
    $max-level: $space-max-level;
    $level-span: $space-level-span;
    $min-ratio: $space-min-ratio;
    $min-val: $space-min-val;
  }

  // 非响应式等级类创建
  @if ($responsive != true) {
    @for $level from 1 through $max-level {
      // 计算属性值
      $val: $min-val + (($level - 1) * $level-span);
      $val: jason-css-value($val);
      // 根据 type 创建 类
      @if ($type == margin) {
        @include margin($level, $val);
      }
      @if ($type == padding) {
        @include padding($level, $val);
      }
      @if ($type == line-height) {
        @include line-height($level, $val);
      }
      @if ($type == font-size) {
        @include font-size($level, $val);
      }
      @if ($type == row-space) {
        @include row-space($level, $val);
      }
    }
  }

  // 响应式等级类创建
  @if ($responsive == true) {
    // 用于记录当前的缩放比例
    $current-ratio: $min-ratio;
    // 断点名称列表
    $name-list: map-keys($responsive-breakpoint);
    // 断点数量
    $breakpointLength: length($responsive-breakpoint);
    // 断点之间的缩放比例
    $span-ratio: (1 - $min-ratio) / ($breakpointLength - 1);
    // 循环断点创建类名
    @each $name in $name-list {
      // 当前断点
      $breakpoint: map_get($responsive-breakpoint, $name);
      // 断点最小宽度
      $min-width: map_get($breakpoint, min-width);
      // 创建 class
      @media (min-width: $min-width) {
        @for $level from 1 through $max-level {
          // 计算属性值
          $value: (($level - 1) * $level-span + $min-val) * $current-ratio;
          // 值不能小于最小值
          @if ($value < $min-val) {
            $value: $min-val;
          }
          // rpx
          $val: jason-css-value($value);
          // 根据 type 创建 类
          // 根据 type 创建 类
          @if ($type == margin) {
            @include margin($level, $val);
          }
          @if ($type == padding) {
            @include padding($level, $val);
          }
          @if ($type == line-height) {
            @include line-height($level, $val);
          }
          @if ($type == font-size) {
            @include font-size($level, $val);
          }
          @if ($type == row-space) {
            @include row-space($level, $val);
          }
        }
      }
      // 改变比例值
      $current-ratio: $current-ratio + $span-ratio;
    }
  }
}

// 根据 max-width 创造类
@mixin loop-max-width($type) {
  // 断点名称列表
  $breakpoint-name-list: map-keys($responsive-breakpoint);
  // 响应式断点的个数
  $breakpoint-length: length($responsive-breakpoint);
  // 根据断点创造 class
  @each $name in $breakpoint-name-list {
    // 当前断点的下标
    $i: index(map_keys($responsive-breakpoint), $name);
    // 断点
    $breakpoint: map_get($responsive-breakpoint, $name);
    // 根据断点生成
    @if ($i + 1 <= $breakpoint-length) {
      $next-breakpoint: (map_get($responsive-breakpoint, nth($breakpoint-name-list, $i + 1)));
      $max-width: map_get($next-breakpoint, min-width) - 1px;
      @media (max-width: $max-width) {
        // 暂无用。。
      }
    }
  }
}

// 根据 min-width 创造类
@mixin loop-min-width($type) {
  // 断点名称列表
  $breakpoint-name-list: map-keys($responsive-breakpoint);
  // 循环断点创建
  @each $name in $breakpoint-name-list {
    // 断点
    $breakpoint: map_get($responsive-breakpoint, $name);
    // 断点最小宽度
    $min-width: map_get($breakpoint, min-width);
    // 断点数量
    $breakpoint-length: length($responsive-breakpoint);
    // 根据不同类型创造类
    @media (min-width: $min-width) {
      @if ($type == container) {
        @include container-width($name);
      }
      @if ($type == row) {
        @include row-space($name);
      }
      @if ($type == col) {
        @include col($name);
      }
      @if ($type == flex) {
        @include flex-utils($name);
      }
      @if ($type == text) {
        @include text-utils($name);
      }
    }
  }
}

// 响应式 hidden
@mixin responsive-hidden() {
  // 断点名称列表
  $name-list: map-keys($responsive-breakpoint);
  // 断点数量
  $breakpoint-length: length($responsive-breakpoint);
  // each
  @each $name in $name-list {
    // 当前断点
    $breakpoint: map_get($responsive-breakpoint, $name);
    // 当前断点下限
    $current-min-width: map_get($breakpoint, min-width);
    // 当前断点的下标
    $i: index(map_keys($responsive-breakpoint), $name);
    // 上一个的端点
    $prev-breakpoint: map_get($responsive-breakpoint, nth($name-list, $breakpoint-length - 1));
    $prev-min-width: map_get($prev-breakpoint, min-width);
    // up
    @if ($i != $breakpoint-length) {
      // 下一个断点
      $next-breakpoint: map_get($responsive-breakpoint, nth($name-list, $i + 1));
      $next-min-width: map_get($next-breakpoint, min-width);
      &-#{$name}-up {
        @media (min-width: $next-min-width) {
          display: none !important;
        }
      }
    }
    // down
    @if ($i != 1) {
      &-#{$name}-down {
        @media (max-width: $current-min-width - 1px) {
          display: none !important;
        }
      }
    }
    // only
    @if ($i == 1) {
      // 下一个断点
      $next-breakpoint: map_get($responsive-breakpoint, nth($name-list, $i + 1));
      $next-min-width: map_get($next-breakpoint, min-width);
      &-#{$name}-only {
        @media (max-width: $next-min-width - 1px) {
          display: none !important;
        }
      }
    }
    @else if ($i == $breakpoint-length) {
      &-#{$name}-only {
        @media (min-width: $current-min-width) {
          display: none !important;
        }
      }
    }
    @else {
      // 下一个断点
      $next-breakpoint: map_get($responsive-breakpoint, nth($name-list, $i + 1));
      $next-min-width: map_get($next-breakpoint, min-width);
      &-#{$name}-only {
        @media (min-width: $current-min-width) and (max-width: $next-min-width - 1px) {
          display: none !important;
        }
      }
    }
  }
}

// 响应式 show
@mixin responsive-show() {
  // 断点名称列表
  $name-list: map-keys($responsive-breakpoint);
  // 断点数量
  $breakpoint-length: length($responsive-breakpoint);
  // each
  @each $name in $name-list {
    // 当前断点
    $breakpoint: map_get($responsive-breakpoint, $name);
    // 当前断点下限
    $current-min-width: map_get($breakpoint, min-width);
    // 当前断点的下标
    $i: index(map_keys($responsive-breakpoint), $name);
    // 上一个的端点
    $prev-breakpoint: map_get($responsive-breakpoint, nth($name-list, $breakpoint-length - 1));
    $prev-min-width: map_get($prev-breakpoint, min-width);
    // up
    @if ($i != $breakpoint-length) {
      // 下一个断点
      $next-breakpoint: map_get($responsive-breakpoint, nth($name-list, $i + 1));
      $next-min-width: map_get($next-breakpoint, min-width);
      &-#{$name}-up {
        display: none !important;
        @media (min-width: $next-min-width) {
          display: block !important;
        }
      }
    }
    // down
    @if ($i != 1) {
      &-#{$name}-down {
        display: none !important;
        @media (max-width: $current-min-width - 1px) {
          display: block !important;
        }
      }
    }
    // only
    @if ($i == 1) {
      // 下一个断点
      $next-breakpoint: map_get($responsive-breakpoint, nth($name-list, $i + 1));
      $next-min-width: map_get($next-breakpoint, min-width);
      &-#{$name}-only {
        display: none !important;
        @media (max-width: $next-min-width - 1px) {
          display: block !important;
        }
      }
    } @else if ($i == $breakpoint-length) {
      &-#{$name}-only {
        display: none !important;
        @media (min-width: $current-min-width) {
          display: block !important;
        }
      }
    } @else {
      // 下一个断点
      $next-breakpoint: map_get($responsive-breakpoint, nth($name-list, $i + 1));
      $next-min-width: map_get($next-breakpoint, min-width);
      &-#{$name}-only {
        display: none !important;
        @media (min-width: $current-min-width) and (max-width: $next-min-width - 1px) {
          display: block !important;
        }
      }
    }
  }
}