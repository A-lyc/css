// 栅格类
@mixin _col-base($breakpoint-name: '') {
  @for $i from 1 through $layout-grid-col-num {
    &#{$breakpoint-name}-#{$i} {
      min-height: 1px;
      @if ($layout-use-flex == false) {
        float: left;
      }
    }
  }
}
@mixin _col-width($breakpoint-name: '') {
  @for $i from 1 through $layout-grid-col-num {
    $width: 100% / $layout-grid-col-num * $i;
    &#{$breakpoint-name}-#{$i} {
      @if ($layout-use-flex == true) {
        flex: 0 0 $width;
        max-width: $width;
      }
      @if ($layout-use-flex == false) {
        width: $width;
      }
    }
  }
}
@mixin _col-pull($breakpoint-name: '') {
  @for $i from 1 through $layout-grid-col-num {
    $offset: 100% / $layout-grid-col-num * $i;
    &#{$breakpoint-name}-pull-#{$i} {
      position: relative;
      right: $offset
    }
  }
}
@mixin _col-push($breakpoint-name: '') {
  @for $i from 1 through $layout-grid-col-num {
    $offset: 100% / $layout-grid-col-num * $i;
    &#{$breakpoint-name}-push-#{$i} {
      position: relative;
      left: $offset
    }
  }
}
@mixin _col-offset($breakpoint-name: '') {
  @for $i from 1 through $layout-grid-col-num {
    $offset: 100% / $layout-grid-col-num * $i;
    &#{$breakpoint-name}-offset-#{$i} {
      margin-left: $offset;
    }
  }
}
@mixin _normal-grid($type) {
  @if ($type == col-base) {
    @include _col-base;
  }
  @if ($type == col-width) {
    @include _col-width;
  }
  @if ($type == col-pull) {
    @include _col-pull;
  }
  @if ($type == col-push) {
    @include _col-push;
  }
  @if ($type == col-offset) {
    @include _col-offset;
  }
}
@mixin _responsive-grid($type) {
  @each $name in $_layout-responsive-name-min-to-max-list {
    $breakpoint: map_get($layout-responsive-breakpoint, $name);
    $min-width: map_get($breakpoint, min-width);
    @media (min-width: $min-width) {
      @if ($type == col-base) {
        @include _col-base(-#{$name});
      }
      @if ($type == col-width) {
        @include _col-width(-#{$name});
      }
      @if ($type == col-pull) {
        @include _col-pull(-#{$name});
      }
      @if ($type == col-push) {
        @include _col-push(-#{$name});
      }
      @if ($type == col-offset) {
        @include _col-offset(-#{$name});
      }
    }
  }
}

// 等级类
@mixin _margin($ratio: 1) {
  @for $i from 1 through $layout-margin-max-level {
    $value: $layout-margin-span * $i * $ratio;
    // 修正最小值
    @if ($value < $layout-margin-min) {
      $value: $layout-margin-min;
    }
    &-#{$i} {
      margin: $value
    }
    &t-#{$i} {
      margin-top: $value
    }
    &r-#{$i} {
      margin-right: $value
    }
    &b-#{$i} {
      margin-bottom: $value
    }
    &l-#{$i} {
      margin-left: $value
    }
    &x-#{$i} {
      margin-left: $value;
      margin-right: $value;
    }
    &y-#{$i} {
      margin-top: $value;
      margin-bottom: $value;
    }
  }
}
@mixin _padding($ratio: 1) {
  @for $i from 1 through $layout-padding-max-level {
    $value: $layout-padding-span * $i * $ratio;
    // 修正最小值
    @if ($value < $layout-padding-min) {
      $value: $layout-margin-min;
    }
    &-#{$i} {
      padding: $value
    }
    &t-#{$i} {
      padding-top: $value
    }
    &r-#{$i} {
      padding-right: $value
    }
    &b-#{$i} {
      padding-bottom: $value
    }
    &l-#{$i} {
      padding-left: $value
    }
    &x-#{$i} {
      padding-left: $value;
      padding-right: $value;
    }
    &y-#{$i} {
      padding-top: $value;
      padding-bottom: $value;
    }
  }
}
@mixin _line-height($ratio: 1) {
  @for $i from 1 through $layout-lh-max-level {
    $value: ($layout-lh-min + $i * $layout-lh-span) * $ratio;
    // 修正最小值
    @if ($value < $layout-lh-min) {
      $value: $layout-lh-min;
    }
    &-#{$i} {
      line-height: $value;
    }
  }
}
@mixin _font-size($ratio: 1) {
  @for $i from 1 through $layout-fs-max-level {
    $value: ($layout-fs-min + ($i - 1) * $layout-fs-span) * $ratio;
    // 修正最小值
    @if ($value < $layout-fs-min) {
      $value: $layout-fs-min;
    }
    &-#{$i} {
      font-size: $value;
    }
  }
}
@mixin _row-space($ratio: 1) {
  @for $i from 1 through $layout-grid-space-max-level {
    $space: $i * $layout-grid-space-span * $ratio;
    // 修正最小值
    @if ($space < $layout-grid-space-min) {
      $space: $layout-grid-space-min;
    }
    &.space-#{$i} {
      margin: $space / 2 * -1;
      > * {
        padding: $space / 2;
      }
    }
  }
}
@mixin _normal-level($type) {
  @if ($type == row-space) {
    @include _row-space(1)
  }
  @if ($type == font-size) {
    @include _font-size(1)
  }
  @if ($type == line-height) {
    @include _line-height(1)
  }
  @if ($type == margin) {
    @include _margin(1)
  }
  @if ($type == padding) {
    @include _padding(1)
  }
}
@mixin _responsive-level($type) {
  $min-ratio: null;
  // 根据 type 追踪最小值
  @if ($type == row-space) {
    $min-ratio: $layout-grid-space-min-ratio;
  }
  @if ($type == font-size) {
    $min-ratio: $layout-fs-min-ratio;
  }
  @if ($type == line-height) {
    $min-ratio: $layout-lh-min-ratio;
  }
  @if ($type == margin) {
    $min-ratio: $layout-margin-min-ratio;
  }
  @if ($type == padding) {
    $min-ratio: $layout-padding-min-ratio;
  }
  // 响应式断点数量
  $breakpoint-length: length($layout-responsive-breakpoint);
  // 当前的响应系数，默认为最小值
  $current-ratio: $min-ratio;
  // 响应系数间的跨度
  $ratio-span: (1 - $min-ratio) / ($breakpoint-length - 1);
  // 循环创建响应式等级类
  @each $name in $_layout-responsive-name-min-to-max-list {
    // 当前断点
    $breakpoint: map_get($layout-responsive-breakpoint, $name);
    // 当前最小屏幕宽度
    $min-width: map_get($breakpoint, min-width);
    // @media
    @media (min-width: $min-width) {
      // switch
      @if ($type == row-space) {
        @include _row-space($current-ratio)
      }
      @if ($type == font-size) {
        @include _font-size($current-ratio)
      }
      @if ($type == line-height) {
        @include _line-height($current-ratio)
      }
      @if ($type == margin) {
        @include _margin($current-ratio)
      }
      @if ($type == padding) {
        @include _padding($current-ratio)
      }
    }
    // 改变现有比例
    $current-ratio: $current-ratio + $ratio-span;
  }
}

// 区间类
@mixin _flex($breakpoint-name: '', $range: '') {
  // display
  &#{$breakpoint-name}#{$range} {
    display: flex;
  }
  &-inline#{$breakpoint-name}#{$range} {
    display: inline-flex;
  }

  // flex-direction
  &-row#{$breakpoint-name}#{$range} {
    flex-direction: row;
  }
  &-row-reverse#{$breakpoint-name}#{$range} {
    flex-direction: row-reverse;
  }
  &-column#{$breakpoint-name}#{$range} {
    flex-direction: column;
  }
  &-column-reverse#{$breakpoint-name}#{$range} {
    flex-direction: column-reverse;
  }

  // flex-wrap
  &-nowrap#{$breakpoint-name}#{$range} {
    flex-wrap: nowrap;
  }
  &-wrap#{$breakpoint-name}#{$range} {
    flex-wrap: wrap;
  }
  &-wrap-reverse#{$breakpoint-name}#{$range} {
    flex-wrap: wrap-reverse;
  }

  // justify-content
  @at-root .justify-content-start#{$breakpoint-name}#{$range} {
    justify-content: flex-start;
  }
  @at-root .justify-content-end#{$breakpoint-name}#{$range} {
    justify-content: flex-end;
  }
  @at-root .justify-content-center#{$breakpoint-name}#{$range} {
    justify-content: center;
  }
  @at-root .justify-content-between#{$breakpoint-name}#{$range} {
    justify-content: space-between;
  }
  @at-root .justify-content-around#{$breakpoint-name}#{$range} {
    justify-content: space-around;
  }

  // align-items
  @at-root .align-items-start#{$breakpoint-name}#{$range} {
    align-items: flex-start;
  }
  @at-root .align-items-end#{$breakpoint-name}#{$range} {
    align-items: flex-end;
  }
  @at-root .align-items-center#{$breakpoint-name}#{$range} {
    align-items: center;
  }
  @at-root .align-items-baseline#{$breakpoint-name}#{$range} {
    align-items: baseline;
  }
  @at-root .align-items-stretch#{$breakpoint-name}#{$range} {
    align-items: stretch;
  }

  // align-content
  @at-root .align-content-start#{$breakpoint-name}#{$range} {
    align-content: flex-start;
  }
  @at-root .align-content-end#{$breakpoint-name}#{$range} {
    align-content: flex-end;
  }
  @at-root .align-content-center#{$breakpoint-name}#{$range} {
    align-content: center;
  }
  @at-root .align-content-between#{$breakpoint-name}#{$range} {
    align-content: space-between;
  }
  @at-root .align-content-around#{$breakpoint-name}#{$range} {
    align-content: space-around;
  }
  @at-root .align-content-stretch#{$breakpoint-name}#{$range} {
    align-content: stretch;
  }

  // align-self
  @at-root .align-self-start#{$breakpoint-name}#{$range} {
    align-self: start;
  }
  @at-root .align-self-end#{$breakpoint-name}#{$range} {
    align-self: end;
  }
  @at-root .align-self-center#{$breakpoint-name}#{$range} {
    align-self: center;
  }
  @at-root .align-self-baseline#{$breakpoint-name}#{$range} {
    align-self: baseline;
  }
  @at-root .align-self-stretch#{$breakpoint-name}#{$range} {
    align-self: stretch;
  }

  // order
  @for $i from 0 through $layout-grid-col-num {
    @at-root .order-#{$i}#{$breakpoint-name}#{$range} {
      order: $i
    }
  }
}
@mixin _hidden($breakpoint-name: '', $range: '') {
  &#{$breakpoint-name}#{$range} {
    display: none !important;
  }
}
@mixin _text($breakpoint-name: '', $range: '') {
  // text-align
  &-left#{$breakpoint-name}#{$range} {
    text-align: left;
  }
  &-right#{$breakpoint-name}#{$range} {
    text-align: right;
  }
  &-center#{$breakpoint-name}#{$range} {
    text-align: center;
  }
  &-justify#{$breakpoint-name}#{$range} {
    text-align: justify;
  }
  // bold
  &-bold#{$breakpoint-name}#{$range} {
    font-weight: bold;
  }
}
@mixin _normal-range($type) {
  @if ($type == text) {
    @include _text();
  }
  @if ($type == hidden) {
    @include _hidden();
  }
  @if ($type == flex) {
    @include _flex();
  }
}
@mixin _responsive-range($type) {
  @each $name in $_layout-responsive-name-min-to-max-list {
    $breakpoint: map_get($layout-responsive-breakpoint, $name);
    $min-width: map_get($breakpoint, min-width);
    $i: index($_layout-responsive-name-min-to-max-list, $name);

    // 以下变量下面会条件赋值
    // 防止下标溢出
    $prev-name: null;
    $prev-breakpoint: null;
    $prev-min-width: null;
    $next-name: null;
    $next-breakpoint: null;
    $next-min-width: null;

    // 赋值 prev
    @if ($i > 1) {
      $prev-name: nth($_layout-responsive-name-min-to-max-list, $_layout_responsive-breakpoint-length - 1);
      $prev-breakpoint: map_get($layout-responsive-breakpoint, $prev-name);
      $prev-min-width: map_get($prev-breakpoint, min-width);
    }
    // 赋值 next
    @if ($i < $_layout_responsive-breakpoint-length) {
      $next-name: nth($_layout-responsive-name-min-to-max-list, $i + 1);
      $next-breakpoint: map_get($layout-responsive-breakpoint, $next-name);
      $next-min-width: map_get($next-breakpoint, min-width);
    }

    // up
    @if ($i != $_layout_responsive-breakpoint-length) {
      @media (min-width: $next-min-width) {
        @if ($type == text) {
          @include _text(-#{$name}, -up);
        }
        @if ($type == hidden) {
          @include _hidden(-#{$name}, -up);
        }
        @if ($type == flex) {
          @include _flex(-#{$name}, -up);
        }
      }
    }
    // down
    @if ($i != 1) {
      @media (max-width: $min-width - 1px) {
        @if ($type == text) {
          @include _text(-#{$name}, -down);
        }
        @if ($type == hidden) {
          @include _hidden(-#{$name}, -down);
        }
        @if ($type == flex) {
          @include _flex(-#{$name}, -down);
        }
      }
    }
    // only
    @if ($i == 1) {
      @media (max-width: $next-min-width - 1px) {
        @if ($type == text) {
          @include _text(-#{$name}, -only);
        }
        @if ($type == hidden) {
          @include _hidden(-#{$name}, -only);
        }
        @if ($type == flex) {
          @include _flex(-#{$name}, -only);
        }
      }
    } @else if ($i == $_layout_responsive-breakpoint-length) {
      @media (min-width: $min-width) {
        @if ($type == text) {
          @include _text(-#{$name}, -only);
        }
        @if ($type == hidden) {
          @include _hidden(-#{$name}, -only);
        }
        @if ($type == flex) {
          @include _flex(-#{$name}, -only);
        }
      }
    } @else {
      @media (min-width: $min-width) and (max-width: $next-min-width - 1px) {
        @if ($type == text) {
          @include _text(-#{$name}, -only);
        }
        @if ($type == hidden) {
          @include _hidden(-#{$name}, -only);
        }
        @if ($type == flex) {
          @include _flex(-#{$name}, -only);
        }
      }
    }
  }
}

// container
@mixin container-base() {
  margin-left: auto;
  margin-right: auto;
  padding-left: $layout-container-gutter;
  padding-right: $layout-container-gutter;
}
@mixin container-width() {
  @if ($_mode == normal) {
    width: $layout-container-normal-width;
  }
  @if ($_mode == responsive) {
    @each $name in $_layout-responsive-name-min-to-max-list {
      $breakpoint: map_get($layout-responsive-breakpoint, $name);
      $min-width: map_get($breakpoint, min-width);
      $container-width: map_get($breakpoint, container-width);
      @media (min-width: $min-width) {
        width: $container-width;
      }
    }
  }
}

// row
@mixin row-base() {
  @if ($layout-use-flex == true) {
    display: flex;
    flex-wrap: wrap;
  }
  @if ($layout-use-flex == false) {
    @extend %clearfix;
  }
}
@mixin row-util() {
  // equal-height(flex)
  @if ($layout-use-flex == true) {
    &.equal-height {
      // col 元素 align-items：stretch 实现等高
      > * {
        display: flex;
        align-items: stretch;
      }
      // col 下第一个子元素，消除宽度影响
      > * > *:first-child {
        width: 100%;
      }
    }
  }

  // space
  @if ($_layout-is-responsive == false) {
    @include _normal-level(1);
  }
  @if ($_layout-is-responsive == true) {
    @include _responsive-level(row-space);
  }
}

// col
@mixin col-base() {
  @if ($_layout-is-responsive == false) {
    @include _normal-grid(col-base);
  }
  @if ($_layout-is-responsive == true) {
    @include _responsive-grid(col-base);
  }
}
@mixin col-width() {
  @if ($_layout-is-responsive == false) {
    @include _normal-grid(col-width);
  }
  @if ($_layout-is-responsive == true) {
    @include _responsive-grid(col-width);
  }
}
@mixin col-util() {
  // pull(responsive)
  // push(responsive)
  // offset(responsive)
  @if ($_layout-is-responsive == true) {
    @include _responsive-grid(col-pull);
    @include _responsive-grid(col-push);
    @include _responsive-grid(col-offset);
  }
}

// font-size
@mixin font-size() {
  @if ($_layout-is-responsive == false) {
    @include _normal-level(font-size);
  }
  @if ($_layout-is-responsive == true) {
    @include _responsive-level(font-size);
  }
}

// line-height
@mixin line-height() {
  @if ($_layout-is-responsive == false) {
    @include _normal-level(line-height);
  }
  @if ($_layout-is-responsive == true) {
    @include _responsive-level(line-height);
  }
}

// margin
@mixin margin() {
  @if ($_layout-is-responsive == false) {
    @include _normal-level(margin);
  }
  @if ($_layout-is-responsive == true) {
    @include _responsive-level(margin);
  }
}

// padding
@mixin padding() {
  @if ($_layout-is-responsive == false) {
    @include _normal-level(padding);
  }
  @if ($_layout-is-responsive == true) {
    @include _responsive-level(padding);
  }
}

// text
@mixin text() {
  @if ($_layout-is-responsive == false) {
    @include _normal-range(text);
  }
  @if ($_layout-is-responsive == true) {
    @include _normal-range(text);
    @include _responsive-range(text);
  }
}

// hidden
@mixin hidden() {
  @if ($_layout-is-responsive == false) {
    @include _normal-range(hidden);
  }
  @if ($_layout-is-responsive == true) {
    @include _normal-range(hidden);
    @include _responsive-range(hidden);
  }
}

// flex
@mixin flex() {
  @if ($_layout-is-responsive == false) {
    @include _normal-range(flex);
  }
  @if ($_layout-is-responsive == true) {
    @include _normal-range(flex);
    @include _responsive-range(flex);
  }
}