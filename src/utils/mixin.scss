// 背景常用处理
@mixin bg-cover($position-x: center, $position-y: center) {
  background-size: cover;
  background-position: $position-x $position-y;
}

// 覆盖的元素
@mixin cover($z-index: null, $position: absolute) {
  @if ($position) {
    position: $position;
  } @else {
    position: absolute;
  }
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  @if ($z-index) {
    z-index: $z-index;
  }
}

// 响应式属性
@mixin res($attr, $base-value, $options: null) {
  // 所有的断点名
  $breakpoint-name-list: map-keys($responsive-breakpoint);
  // 响应式断点的个数
  $breakpoint-length: length($responsive-breakpoint);
  // 赋值基础属性值
  @if ($base-value) {
    #{$attr}: $base-value;
  }
  // 根据设置的断点具体值进行缩放
  @if (type_of($options) == map) {
    @each $name in map-keys($options) {
      // 值
      $val: map-get($options, $name);
      // 对应的响应式断点
      $breakpoint: map-get($responsive-breakpoint, $name);
      // 当前断点的下标
      $i: index(map_keys($responsive-breakpoint), $name);
      // 若没有超过界限则正常赋值
      @if ($i + 1 <= $breakpoint-length) {
        $next-breakpoint: map_get($responsive-breakpoint, nth($breakpoint-name-list, $i + 1));
        $max-width: map_get($next-breakpoint, min-width) - 1px;
        @media (max-width: $max-width) {
          #{$attr}: $val;
        }
      }
    }
  }
    // 是否自动进行自动响应式缩放
  @else {
    @if (unit($base-value) != "") {
      // 最小缩小比例
      $min-ratio: null;
      // 最小值
      $min-val: null;
      // 判断是否制定了最小缩放比例
      @if (type_of($options) == number) {
        $min-ratio: $options;
      }
        // 未指定，使用默认的
      @else {
        @if ($attr == "font-size") {
          $min-ratio: $fs-min-ratio;
          $min-val: $fs-min-val;
        }
        @if ($attr == "line-height") {
          $min-ratio: $lh-min-ratio;
          $min-val: $lh-min-val;
        }
        @if ($attr == "margin") {
          $min-ratio: $margin-min-ratio;
          $min-val: $margin-min-val;
        }
        @if ($attr == "margin-top") {
          $min-ratio: $margin-min-ratio;
          $min-val: $margin-min-val;
        }
        @if ($attr == "margin-right") {
          $min-ratio: $margin-min-ratio;
          $min-val: $margin-min-val;
        }
        @if ($attr == "margin-bottom") {
          $min-ratio: $margin-min-ratio;
          $min-val: $margin-min-val;
        }
        @if ($attr == "margin-left") {
          $min-ratio: $margin-min-ratio;
          $min-val: $margin-min-val;
        }
        @if ($attr == "padding") {
          $min-ratio: $padding-min-ratio;
          $min-val: $padding-min-val;
        }
        @if ($attr == "padding-top") {
          $min-ratio: $padding-min-ratio;
          $min-val: $padding-min-val;
        }
        @if ($attr == "padding-right") {
          $min-ratio: $padding-min-ratio;
          $min-val: $padding-min-val;
        }
        @if ($attr == "padding-bottom") {
          $min-ratio: $padding-min-ratio;
          $min-val: $padding-min-val;
        }
        @if ($attr == "padding-left") {
          $min-ratio: $padding-min-ratio;
          $min-val: $padding-min-val;
        }
      }
      // 定义响应式缩放
      @each $breakpoint-name in reverse($breakpoint-name-list) {
        $breakpoint: map-get($responsive-breakpoint, $breakpoint-name);
        // 断点所处的下标
        $i: index(map_keys($responsive-breakpoint), $breakpoint-name);
        // 若没有超过界限则正常赋值
        @if ($i + 1 <= $breakpoint-length) {
          $next-breakpoint: (map_get($responsive-breakpoint, nth($breakpoint-name-list, $i + 1)));
          $max-width: map_get($next-breakpoint, min-width) - 1px;
          // 算法为：
          // 去除最小值（最小值为 $min-ratio）
          // 将剩下的按照可缩放的比例平分后，确定当前占多少 再加上最小值系数
          $ratio: $min-ratio + ((1 - $min-ratio) / ($breakpoint-length - 1) * ($i - 1));
          $val: $base-value * $ratio;
          // 若最小值限制存在
          @if ($min-val != null) {
            @if ($val < $min-val) {
              $val: $min-val;
            }
          }
          @media (max-width: $max-width) {
            #{$attr}: $val;
          }
        }
      }
    }
  }
}

// 移动端 1px 线
@mixin one-px($dir: 'x', $origin: center center) {
  @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5) {
    @if ($dir == 'x') {
      transform: scaleY(0.7);
    }
    @if ($dir == 'y') {
      transform: scaleX(0.7);
    }
  }
  @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) {
    @if ($dir == 'x') {
      transform: scaleY(0.5);
    }
    @if ($dir == 'y') {
      transform: scaleX(0.5);
    }
  }
}

// 根据主题色创建辅助类名
// 文字颜色，背景颜色，上下左右边框颜色
@mixin color($name, $color) {
  .color-#{$name} {
    color: $color;
  }
  .background-#{$name} {
    background-color: $color;
  }
  .border-#{$name} {
    border-color: $color;
  }
  .border-top-#{$name} {
    border-top-color: $color;
  }
  .border-right-#{$name} {
    border-right-color: $color;
  }
  .border-bottom-#{$name} {
    border-bottom-color: $color;
  }
  .border-left-#{$name} {
    border-left-color: $color;
  }
}