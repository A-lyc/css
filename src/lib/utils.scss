@import "variable";

// 返回去除单位后的数值
@function strip-unit ($value) {
  @return ($value / ($value * 0 + 1));
}

// 将数值 按照 指定的设计图大小转为 vw 单位
@function vw ($px, $width: 1920px) {
  $width: strip-unit($width);
  $px: strip-unit($px);
  @return $px / ($width / 100) * 1vw;
}

// 翻转列表
@function reverse ($list) {
  // 结果
  $result: ();
  // length
  $length: length($list);
  // 循环拼接
  @for $i from 1 through $length {
    $last-item: nth($list, $length - $i + 1);
    $result: append($result, $last-item);
  }
  // return
  @return $result;
}

// 清除浮动影响
@mixin clearfix() {
  &:after {
    content: "";
    display: block;
    clear: both;
  }
}

// 背景常用处理
@mixin bg-cover($position-x: center, $position-y: center) {
  background-size: cover;
  background-position: $position-x $position-y;
}

// 文字一行显示溢出隐藏
@mixin ellipsis() {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

// 覆盖的元素
@mixin cover($z-index: null, $position: absolute) {
  @if ($position) {
    position: $position;
  } @else {
    position: absolute;
  }
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  @if ($z-index) {
    z-index: $z-index;
  }
}

// 响应式
@mixin res($attr, $base-value, $breakpoints) {
  $i: 1;
  // 基础属性值
  #{$attr}: $base-value;
  // 根据响应式断点进行设置
  @each $global-breakpoint in reverse($responsive-breakpoint) {
    $global-name: map_get($global-breakpoint, name);
    $min-width: map_get($global-breakpoint, min-width);
    $max-width: $min-width - 1px;
    @each $breakpoint in $breakpoints {
      $name: map_get($breakpoint, name);
      $val: map_get($breakpoint, val);
      @if ($name == $global-name) {
        @media (max-width: $max-width) {
          #{$attr}: $val;
        }
      }
    }
  }
}