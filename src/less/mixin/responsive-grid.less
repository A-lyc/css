/**
 * 响应式库 行中列间距
 */
.responsive-grid-row-space(@screen){
  .row-space(@space) when (@space<=@responsive-grid-max-row-space){
    @index:unit(@space);
    .row-@{screen}-@{index}{
      margin-left:-@space / 2;
      margin-right:-@space / 2;
      >div{
        padding-left:@space / 2;
        padding-right:@space / 2;
      }
    }
    .row-space(@space+5px);
  }
  .row-space(0px);
}

/**
 * 响应式库 列的基础属性
 */
.responsive-grid-col-attr(){
  .col(@index) {
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) {
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) {
    @{list} {
      position: relative;
      min-height: 1px;
    }
  }
  .col(1);
}

/**
 * 列的浮动 属性
 */
.responsive-grid-col-float(@class) {
  .col(@index) {
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) {
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) {
    @{list} {
      float: left;
    }
  }
  .col(1);
}

/**
 * 响应式库 计算列的栅格属性
 */
.responsive-grid-col-calc(@index,@screen,@type) when (@type = width){
  .col-@{screen}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
.responsive-grid-col-calc(@index,@screen,@type) when (@type = offset){
  .col-@{screen}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}
.responsive-grid-col-calc(@index,@screen,@type) when (@type = pull) and (@index > 0) {
  .col-@{screen}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.responsive-grid-col-calc(@index,@screen,@type) when (@type = pull) and (@index = 0) {
  .col-@{screen}-pull-0 {
    right: auto;
  }
}
.responsive-grid-col-calc(@index,@screen,@type) when (@type = push) and (@index > 0) {
  .col-@{screen}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.responsive-grid-col-calc(@index,@screen,@type) when (@type = push) and (@index = 0) {
  .col-@{screen}-push-0 {
    left: auto;
  }
}

/**
 * 响应式库 用于循环
 */
.responsive-grid-col-loop(@index,@screen,@type) when (@index>=0) {
  .responsive-grid-col-calc(@index,@screen,@type);
  .responsive-grid-col-loop((@index - 1),@screen,@type)
}

/**
 * 响应式库 grid 接口
 */
.responsive-grid-col(@screen){
  .responsive-grid-col-float(@screen);
  .responsive-grid-col-loop(@grid-columns,@screen,width);
  .responsive-grid-col-loop(@grid-columns,@screen,offset);
  .responsive-grid-col-loop(@grid-columns,@screen,push);
  .responsive-grid-col-loop(@grid-columns,@screen,pull);
}