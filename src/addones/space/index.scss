// margin 和 padding
// 响应式库会按照定义的响应式断点进行响应
@mixin margin($i: 1, $ratio: 1) {
  $value: $space-span * $i * $ratio;
  $value: $space-span * $i * $ratio;
  @if ($value < $space-min-px) {
    $value: $space-min-px;
  }
  .m-#{$i} {
    margin: $value;
  }
  .mx-#{$i} {
    margin-left: $value;
    margin-right: $value;
  }
  .my-#{$i} {
    margin-top: $value;
    margin-bottom: $value;
  }
  .mt-#{$i} {
    margin-top: $value;
  }
  .mr-#{$i} {
    margin-right: $value;
  }
  .mb-#{$i} {
    margin-bottom: $value;
  }
  .ml-#{$i} {
    margin-left: $value;
  }
}

@mixin padding($i: 1, $ratio: 1) {
  $value: $space-span * $i * $ratio;
  @if ($value < $space-min-px) {
    $value: $space-min-px;
  }
  .p-#{$i} {
    padding: $value;
  }
  .px-#{$i} {
    padding-left: $value;
    padding-right: $value;
  }
  .py-#{$i} {
    padding-top: $value;
    padding-bottom: $value;
  }
  .pt-#{$i} {
    padding-top: $value;
  }
  .pr-#{$i} {
    padding-right: $value;
  }
  .pb-#{$i} {
    padding-bottom: $value;
  }
  .pl-#{$i} {
    padding-left: $value;
  }
}

// 循环调用 margin 和 padding
@mixin loop($ratio: 1) {
  @for $i from 1 through $space-level {
    @include margin($i, $ratio);
    @include padding($i, $ratio);
  }
}

// normal
@if ($mode == normal) {
  @for $i from 1 through $space-level {
    @include loop();
  }
}

// responsive
@if ($mode == responsive) {
  // 断点数量
  $breakpointLength: length($responsive-breakpoint);
  // 每一份的跨度
  $span: (1 - $space-min-ratio) / ($breakpointLength - 1);
  // 当前比例
  $current-ratio: $space-min-ratio;
  @each $breakpoint in $responsive-breakpoint {
    // 响应式断点宽度
    $min-width: map_get($breakpoint, min-width);
    // 最小屏幕宽度样式
    @if ($min-width == 0px) {
      @include loop($current-ratio);
    }
    // 非最小屏幕宽度样式
    @if ($min-width != 0px) {
      @media (min-width: $min-width) {
        @include loop($current-ratio);
      }
    }
    // 当前比例加上跨域
    $current-ratio: $current-ratio + $span;
  }
}