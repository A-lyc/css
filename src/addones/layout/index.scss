@mixin flex-box-utils($name: null) {
  @if ($name) {
    $name: -#{$name};
  }
  // flex-direction
  .flex#{$name}-row {
    flex-direction: row;
  }
  .flex#{$name}-row-reverse {
    flex-direction: row-reverse;
  }
  .flex#{$name}-column {
    flex-direction: column;
  }
  .flex#{$name}-column-reverse {
    flex-direction: column-reverse;
  }
  // flex-wrap
  .flex#{$name}-nowrap {
    flex-wrap: nowrap;
  }
  .flex#{$name}-wrap {
    flex-wrap: wrap;
  }
  .flex#{$name}-wrap-reverse {
    flex-wrap: wrap-reverse;
  }
  // justify-content
  .justify-content#{$name}-start {
    justify-content: flex-start;
  }
  .justify-content#{$name}-end {
    justify-content: flex-end;
  }
  .justify-content#{$name}-center {
    justify-content: center;
  }
  .justify-content#{$name}-between {
    justify-content: space-between;
  }
  .justify-content#{$name}-around {
    justify-content: space-around;
  }
  // align-items
  .align-items#{$name}-start {
    align-items: flex-start;
  }
  .align-items#{$name}-end {
    align-items: flex-end;
  }
  .align-items#{$name}-center {
    align-items: center;
  }
  .align-items#{$name}-baseline {
    align-items: baseline;
  }
  .align-items#{$name}-stretch {
    align-items: stretch;
  }
  // align-content
  .align-content#{$name}-start {
    align-content: flex-start;
  }
  .align-content#{$name}-end {
    align-content: flex-end;
  }
  .align-content#{$name}-center {
    align-content: center;
  }
  .align-content#{$name}-between {
    align-content: space-between;
  }
  .align-content#{$name}-around {
    align-content: space-around;
  }
  .align-content#{$name}-stretch {
    align-content: stretch;
  }
}

@mixin flex-item-utils($name: null) {

}

@mixin col-space($name: null, $ratio: 1) {
  @if ($name) {
    $name: -#{$name};
  }
  @for $i from 1 through $col-space-level {
    $value: $col-space-span * $i * $ratio / 2;
    @if ($value < $col-space-min-px) {
      $value: $col-space-min-px;
    }
    &-space#{$name}-#{$i} {
      margin-left: $value * -1;
      margin-right: $value * -1;
      > * {
        padding-left: $value;
        padding-right: $value;
      }
    }
  }
}

// flex 工具类
// 行工具类
@include flex-box-utils();
@include flex-item-utils();
// 响应式工具类
@each $breakpoint in $responsive-breakpoint {
  // 响应式断点名称
  $name: map_get($breakpoint, name);
  // 响应式断点宽度
  $min-width: map_get($breakpoint, min-width);
  // 当前断点 container 最大宽度
  $container-max-width: map_get($breakpoint, container-max-width);
  // 最小屏幕宽度样式
  @if ($min-width == 0) {
    @include flex-box-utils($name);
    @include flex-item-utils($name);
  }
  // 非最小屏幕宽度样式
  @if ($min-width != 0px) {
    @media (min-width: $min-width) {
      @include flex-box-utils($name);
      @include flex-item-utils($name);
    }
  }
}

.container {
  &, &-fluid {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left: $container-padding;
    padding-right: $container-padding;
  }
  // 宽度
  @if ($mode == normal) {
    max-width: $container-normal-width;
  }
  @if ($mode == responsive) {
    @each $breakpoint in $responsive-breakpoint {
      // 响应式断点宽度
      $min-width: map_get($breakpoint, min-width);
      // 当前断点 container 最大宽度
      $container-max-width: map_get($breakpoint, container-max-width);
      // 非最小屏幕宽度样式（最小时为 100%）
      @if ($min-width != 0px) {
        @media (min-width: $min-width) {
          max-width: $container-max-width;
        }
      }
    }
  }
}

.row {
  @if ($grid-mode == flex) {
    display: flex;
    flex-wrap: wrap;
  }
  @if ($grid-mode == float) {
    @include clearfix;
  }
}

.col {
  // 行中列间距，class 需要在 .row 上定义
  @if ($mode == normal) {
    @include col-space();
  }
  @if ($mode == responsive) {
    // 断点数量
    $breakpointLength: length($responsive-breakpoint);
    // 每一份的跨度
    $span: (1 - $col-space-min-ratio) / ($breakpointLength - 1);
    // 当前比例
    $current-ratio: $col-space-min-ratio;
    @each $breakpoint in $responsive-breakpoint {
      // 响应式断点名称
      $name: map_get($breakpoint, name);
      // 响应式断点宽度
      $min-width: map_get($breakpoint, min-width);
      // 最小屏幕宽度样式
      @if ($min-width == 0) {
        @include col-space($name, $current-ratio);
      }
      // 非最小屏幕宽度样式
      @if ($min-width != 0px) {
        @media (min-width: $min-width) {
          @include col-space($name, $current-ratio);
        }
      }
      // 当前比例加上跨域
      $current-ratio: $current-ratio + $span;
    }
  }
  // 行宽度（未完成）
}

.flex {
  display: flex;
}

.inline-flex {
  display: inline-flex;
}